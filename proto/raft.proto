syntax = "proto3";
package raft;

// Generate stub by command : protoc pb.proto --go_out=plugins=grpc:.
option go_package = "/raft_pfb";

service RaftNode{
  rpc Propose(ProposeArgs) returns (ProposeReply);
  rpc GetValue(GetValueArgs) returns (GetValueReply);
  rpc SetElectionTimeout(SetElectionTimeoutArgs) returns (SetElectionTimeoutReply);
  rpc SetHeartBeatInterval(SetHeartBeatIntervalArgs) returns (SetHeartBeatIntervalReply);
  rpc RequestVote(RequestVoteArgs) returns (RequestVoteReply);
  rpc AppendEntries(AppendEntriesArgs) returns (AppendEntriesReply);
  rpc CheckEvents(CheckEventsArgs) returns (CheckEventsReply);
}

message CheckEventsArgs{
  map<string, int32> RequestVoteSchema = 1;
  map<string, int32> AppendEntriesSchema = 2;
  repeated Event ExpectedEvents = 3;
}

message CheckEventsReply{
  bool Success = 1;
  string ErrMsg = 2;
}

message ProposeArgs{
  Operation Op = 1;
  string key = 2;
  int32 V = 3;
}

enum Role {
  Follower = 0;
  Candidate = 1;
  Leader = 2;
}

enum Operation{
  Put = 0;
  Delete = 1;
}

enum Status{
  OK = 0;
  KeyFound = 1;
  KeyNotFound = 2;
  WrongNode = 3;
}

enum MsgName{
  RequestVote = 0;
  AppendEntries = 1;
}

message ProposeReply{
  int32 CurrentLeader = 1;
  Status Status = 2;
}

message GetValueArgs{
  string Key = 1;
}

message GetValueReply{
  int32 V = 1;
  Status Status = 2;
}

message LogEntry{
  int32 Term = 1;
  Operation Op = 2;
  string Key = 3;
  int32 Value = 4;
}

message RequestVoteArgs{
  int32 From = 1;
  int32 To = 2;
  int32 Term = 3;
  int32 CandidateId = 4;
  int32 LastLogIndex = 5;
  int32 LastLogTerm = 6;
}

message RequestVoteReply{
  int32 From = 1;
  int32 To = 2;
  int32 Term = 3;
  bool VoteGranted = 4;
}

message AppendEntriesArgs {
  int32 From = 1 ;
  int32 To = 2 ;
  int32 Term = 3 ;
  int32 LeaderId = 4;
  int32 PrevLogIndex = 5;
  int32 PrevLogTerm = 6;
  repeated LogEntry Entries = 7;
  int32 LeaderCommit = 8;
}

message AppendEntriesReply{
  int32 From = 1;
  int32 To = 2;
  int32 Term = 3;
  bool Success = 4;
  int32 MatchIndex = 5;
}

message SetElectionTimeoutArgs{
  int32 Timeout = 1;
}

message SetElectionTimeoutReply{
}

message SetHeartBeatIntervalArgs{
  int32 Interval = 1;
}

message SetHeartBeatIntervalReply{
}

message Event{
  MsgName Msg = 1;
  int32 From = 2;
  int32 To = 3;

  int32 Term = 4;

  int32 CandidateId = 5;
  int32 LastLogIndex = 6;
  int32 LastLogTerm = 7;

  bool VoteGranted = 8;

  int32 LeaderId = 9;
  int32 PrevLogIndex = 10;
  int32 PrevLogTerm = 11;
  repeated LogEntry Entries = 12;
  int32 LeaderCommit = 13;

  bool Success = 14;
  int32 MatchIndex = 15;

  bool IsResponse = 16;
}