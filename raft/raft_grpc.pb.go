// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: raft.proto

package raft

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RaftNode_Propose_FullMethodName              = "/raft.RaftNode/Propose"
	RaftNode_GetValue_FullMethodName             = "/raft.RaftNode/GetValue"
	RaftNode_SetElectionTimeout_FullMethodName   = "/raft.RaftNode/SetElectionTimeout"
	RaftNode_SetHeartBeatInterval_FullMethodName = "/raft.RaftNode/SetHeartBeatInterval"
	RaftNode_RequestVote_FullMethodName          = "/raft.RaftNode/RequestVote"
	RaftNode_AppendEntries_FullMethodName        = "/raft.RaftNode/AppendEntries"
	RaftNode_CheckEvents_FullMethodName          = "/raft.RaftNode/CheckEvents"
)

// RaftNodeClient is the client API for RaftNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaftNodeClient interface {
	Propose(ctx context.Context, in *ProposeArgs, opts ...grpc.CallOption) (*ProposeReply, error)
	GetValue(ctx context.Context, in *GetValueArgs, opts ...grpc.CallOption) (*GetValueReply, error)
	SetElectionTimeout(ctx context.Context, in *SetElectionTimeoutArgs, opts ...grpc.CallOption) (*SetElectionTimeoutReply, error)
	SetHeartBeatInterval(ctx context.Context, in *SetHeartBeatIntervalArgs, opts ...grpc.CallOption) (*SetHeartBeatIntervalReply, error)
	RequestVote(ctx context.Context, in *RequestVoteArgs, opts ...grpc.CallOption) (*RequestVoteReply, error)
	AppendEntries(ctx context.Context, in *AppendEntriesArgs, opts ...grpc.CallOption) (*AppendEntriesReply, error)
	CheckEvents(ctx context.Context, in *CheckEventsArgs, opts ...grpc.CallOption) (*CheckEventsReply, error)
}

type raftNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftNodeClient(cc grpc.ClientConnInterface) RaftNodeClient {
	return &raftNodeClient{cc}
}

func (c *raftNodeClient) Propose(ctx context.Context, in *ProposeArgs, opts ...grpc.CallOption) (*ProposeReply, error) {
	out := new(ProposeReply)
	err := c.cc.Invoke(ctx, RaftNode_Propose_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftNodeClient) GetValue(ctx context.Context, in *GetValueArgs, opts ...grpc.CallOption) (*GetValueReply, error) {
	out := new(GetValueReply)
	err := c.cc.Invoke(ctx, RaftNode_GetValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftNodeClient) SetElectionTimeout(ctx context.Context, in *SetElectionTimeoutArgs, opts ...grpc.CallOption) (*SetElectionTimeoutReply, error) {
	out := new(SetElectionTimeoutReply)
	err := c.cc.Invoke(ctx, RaftNode_SetElectionTimeout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftNodeClient) SetHeartBeatInterval(ctx context.Context, in *SetHeartBeatIntervalArgs, opts ...grpc.CallOption) (*SetHeartBeatIntervalReply, error) {
	out := new(SetHeartBeatIntervalReply)
	err := c.cc.Invoke(ctx, RaftNode_SetHeartBeatInterval_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftNodeClient) RequestVote(ctx context.Context, in *RequestVoteArgs, opts ...grpc.CallOption) (*RequestVoteReply, error) {
	out := new(RequestVoteReply)
	err := c.cc.Invoke(ctx, RaftNode_RequestVote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftNodeClient) AppendEntries(ctx context.Context, in *AppendEntriesArgs, opts ...grpc.CallOption) (*AppendEntriesReply, error) {
	out := new(AppendEntriesReply)
	err := c.cc.Invoke(ctx, RaftNode_AppendEntries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftNodeClient) CheckEvents(ctx context.Context, in *CheckEventsArgs, opts ...grpc.CallOption) (*CheckEventsReply, error) {
	out := new(CheckEventsReply)
	err := c.cc.Invoke(ctx, RaftNode_CheckEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftNodeServer is the server API for RaftNode service.
// All implementations must embed UnimplementedRaftNodeServer
// for forward compatibility
type RaftNodeServer interface {
	Propose(context.Context, *ProposeArgs) (*ProposeReply, error)
	GetValue(context.Context, *GetValueArgs) (*GetValueReply, error)
	SetElectionTimeout(context.Context, *SetElectionTimeoutArgs) (*SetElectionTimeoutReply, error)
	SetHeartBeatInterval(context.Context, *SetHeartBeatIntervalArgs) (*SetHeartBeatIntervalReply, error)
	RequestVote(context.Context, *RequestVoteArgs) (*RequestVoteReply, error)
	AppendEntries(context.Context, *AppendEntriesArgs) (*AppendEntriesReply, error)
	CheckEvents(context.Context, *CheckEventsArgs) (*CheckEventsReply, error)
	mustEmbedUnimplementedRaftNodeServer()
}

// UnimplementedRaftNodeServer must be embedded to have forward compatible implementations.
type UnimplementedRaftNodeServer struct {
}

func (UnimplementedRaftNodeServer) Propose(context.Context, *ProposeArgs) (*ProposeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Propose not implemented")
}
func (UnimplementedRaftNodeServer) GetValue(context.Context, *GetValueArgs) (*GetValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}
func (UnimplementedRaftNodeServer) SetElectionTimeout(context.Context, *SetElectionTimeoutArgs) (*SetElectionTimeoutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetElectionTimeout not implemented")
}
func (UnimplementedRaftNodeServer) SetHeartBeatInterval(context.Context, *SetHeartBeatIntervalArgs) (*SetHeartBeatIntervalReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHeartBeatInterval not implemented")
}
func (UnimplementedRaftNodeServer) RequestVote(context.Context, *RequestVoteArgs) (*RequestVoteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVote not implemented")
}
func (UnimplementedRaftNodeServer) AppendEntries(context.Context, *AppendEntriesArgs) (*AppendEntriesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendEntries not implemented")
}
func (UnimplementedRaftNodeServer) CheckEvents(context.Context, *CheckEventsArgs) (*CheckEventsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEvents not implemented")
}
func (UnimplementedRaftNodeServer) mustEmbedUnimplementedRaftNodeServer() {}

// UnsafeRaftNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaftNodeServer will
// result in compilation errors.
type UnsafeRaftNodeServer interface {
	mustEmbedUnimplementedRaftNodeServer()
}

func RegisterRaftNodeServer(s grpc.ServiceRegistrar, srv RaftNodeServer) {
	s.RegisterService(&RaftNode_ServiceDesc, srv)
}

func _RaftNode_Propose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposeArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftNodeServer).Propose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaftNode_Propose_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftNodeServer).Propose(ctx, req.(*ProposeArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftNode_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValueArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftNodeServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaftNode_GetValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftNodeServer).GetValue(ctx, req.(*GetValueArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftNode_SetElectionTimeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetElectionTimeoutArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftNodeServer).SetElectionTimeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaftNode_SetElectionTimeout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftNodeServer).SetElectionTimeout(ctx, req.(*SetElectionTimeoutArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftNode_SetHeartBeatInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHeartBeatIntervalArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftNodeServer).SetHeartBeatInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaftNode_SetHeartBeatInterval_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftNodeServer).SetHeartBeatInterval(ctx, req.(*SetHeartBeatIntervalArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftNode_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftNodeServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaftNode_RequestVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftNodeServer).RequestVote(ctx, req.(*RequestVoteArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftNode_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftNodeServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaftNode_AppendEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftNodeServer).AppendEntries(ctx, req.(*AppendEntriesArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftNode_CheckEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckEventsArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftNodeServer).CheckEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaftNode_CheckEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftNodeServer).CheckEvents(ctx, req.(*CheckEventsArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// RaftNode_ServiceDesc is the grpc.ServiceDesc for RaftNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RaftNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "raft.RaftNode",
	HandlerType: (*RaftNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Propose",
			Handler:    _RaftNode_Propose_Handler,
		},
		{
			MethodName: "GetValue",
			Handler:    _RaftNode_GetValue_Handler,
		},
		{
			MethodName: "SetElectionTimeout",
			Handler:    _RaftNode_SetElectionTimeout_Handler,
		},
		{
			MethodName: "SetHeartBeatInterval",
			Handler:    _RaftNode_SetHeartBeatInterval_Handler,
		},
		{
			MethodName: "RequestVote",
			Handler:    _RaftNode_RequestVote_Handler,
		},
		{
			MethodName: "AppendEntries",
			Handler:    _RaftNode_AppendEntries_Handler,
		},
		{
			MethodName: "CheckEvents",
			Handler:    _RaftNode_CheckEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft.proto",
}
